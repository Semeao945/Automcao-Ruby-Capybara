'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _progress = require('progress');

var _progress2 = _interopRequireDefault(_progress);

var _readline = require('readline');

var _readline2 = _interopRequireDefault(_readline);

require('colors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Step = function () {
  (0, _createClass3.default)(Step, [{
    key: 'stepInfo',
    get: function get() {
      var steps = this.args.archive ? 3 : 2;
      return ('[' + this.step + '/' + steps + ']').dim + ' ' + this.description;
    }
  }], [{
    key: 'clearLine',
    value: function clearLine() {
      _readline2.default.clearLine(process.stdout, 0);
      _readline2.default.cursorTo(process.stdout, 0);
    }
  }]);

  function Step(args, step, description) {
    (0, _classCallCheck3.default)(this, Step);

    this.step = step;
    this.description = description;
  }

  (0, _createClass3.default)(Step, [{
    key: 'init',
    value: function init(total) {
      this.startTime = Date.now();
      if (total) {
        this.progressBar = new _progress2.default('[:bar] :percent :etas', {
          complete: '█',
          incomplete: '░',
          width: process.stdout.columns - 5,
          total: total,
          clear: true
        });
      }

      console.log(this.stepInfo + '...');
    }
  }, {
    key: 'tick',
    value: function tick(amount) {
      this.progressBar.tick(amount);
    }
  }, {
    key: 'complete',
    value: function complete(result) {
      if (this.progressBar) {
        this.progressBar.update(1);
      }

      var seconds = (Date.now() - this.startTime) / 1000;

      Step.clearLine();
      _readline2.default.moveCursor(process.stdout, 0, -1);
      Step.clearLine();

      console.log(this.stepInfo + ': ' + 'success'.green + ': ' + result + ' (' + seconds + 's)');
    }
  }]);
  return Step;
}();

exports.default = Step;