'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _Step2 = require('./Step');

var _Step3 = _interopRequireDefault(_Step2);

var _PBError = require('./PBError');

var _PBError2 = _interopRequireDefault(_PBError);

var _PBRequest = require('./PBRequest');

var _PBRequest2 = _interopRequireDefault(_PBRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var writeFile = _bluebird2.default.promisify(_fs2.default.writeFile);

var REGISTRY_URL = 'https://registry.npmjs.org';
var CACHE_FILE = 'package-bundle-cache.json';
var PACKAGE_JSON = 'package.json';

var Resolver = function (_Step) {
  (0, _inherits3.default)(Resolver, _Step);
  (0, _createClass3.default)(Resolver, null, [{
    key: 'getMatchingVersion',
    value: function getMatchingVersion(pkg, versions, range) {
      var maxVersion = void 0;
      try {
        maxVersion = _semver2.default.maxSatisfying(versions, range);
        if (!maxVersion) {
          throw new Error('Unable to find version ' + range + ' in ' + pkg);
        }
      } catch (err) {
        if (!versions.includes(range)) {
          throw err;
        }
        maxVersion = range;
      }
      return maxVersion;
    }
  }, {
    key: 'logPackage',
    value: function logPackage(pkg) {
      _Step3.default.clearLine();
      process.stdout.write(pkg);
    }
  }]);

  function Resolver(args) {
    (0, _classCallCheck3.default)(this, Resolver);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Resolver.__proto__ || (0, _getPrototypeOf2.default)(Resolver)).call(this, args, 1, 'Resolving dependencies'));

    _this.args = args;
    _this.packageCache = {};
    _this.downloads = new _map2.default();

    _this.packages = args.args;

    if (!_this.packages.length) {
      _this.checkPackageJson();
    }

    if (args.cache) {
      try {
        var cacheFile = _fs2.default.readFileSync(CACHE_FILE);
        _this.packageCache = JSON.parse(cacheFile);
      } catch (err) {
        if (err.code !== 'ENOENT') {
          throw err;
        }
      }
    }
    return _this;
  }

  (0, _createClass3.default)(Resolver, [{
    key: 'init',
    value: function init() {
      var _this2 = this;

      (0, _get3.default)(Resolver.prototype.__proto__ || (0, _getPrototypeOf2.default)(Resolver.prototype), 'init', this).call(this);
      return _bluebird2.default.mapSeries(this.packages, function (pkg) {
        return _this2.processInput(pkg);
      }).then(function () {
        return _this2.args.cache && _this2.saveCache();
      }).then(function () {
        return _this2.getResult();
      });
    }
  }, {
    key: 'checkPackageJson',
    value: function checkPackageJson() {
      try {
        var packageFile = _fs2.default.readFileSync(PACKAGE_JSON);

        var _JSON$parse = JSON.parse(packageFile),
            dependencies = _JSON$parse.dependencies,
            devDependencies = _JSON$parse.devDependencies,
            optionalDependencies = _JSON$parse.optionalDependencies;

        var combinedDependencies = (0, _assign2.default)({}, dependencies, this.args.dev && devDependencies, this.args.optional && optionalDependencies);

        this.packages = (0, _entries2.default)(combinedDependencies).map(function (_ref) {
          var _ref2 = (0, _slicedToArray3.default)(_ref, 2),
              k = _ref2[0],
              v = _ref2[1];

          return k + '@' + v;
        });
      } catch (err) {
        if (err.code === 'ENOENT') {
          this.args.help();
        } else {
          throw err;
        }
      }
    }
  }, {
    key: 'getResult',
    value: function getResult() {
      this.complete('Found ' + this.downloads.size + ' package' + (this.downloads.size === 1 ? '' : 's'));
      if (this.downloads.size === 0) {
        throw new _PBError2.default('No new packages required.' + (this.args.cache ? ' Try running with the `--no-cache` option.' : ''), 'info');
      }
    }
  }, {
    key: 'processInput',
    value: function processInput(pkg) {
      var strippedAt = false;
      var name = pkg;
      var range = void 0;
      if (name.startsWith('@')) {
        name = name.substring(1);
        strippedAt = true;
      }
      if (name.includes('@')) {
        var _name$split = name.split('@');

        var _name$split2 = (0, _slicedToArray3.default)(_name$split, 2);

        name = _name$split2[0];
        range = _name$split2[1];
      }
      if (strippedAt) {
        name = '@' + name;
      }
      return this.resolveDependencies(name, range, { requested: true });
    }
  }, {
    key: 'alreadyHaveValidVersion',
    value: function alreadyHaveValidVersion(pkg, range) {
      var versions = this.packageCache[pkg];
      return !!versions && _semver2.default.maxSatisfying(versions, range) !== null;
    }
  }, {
    key: 'resolveDependencies',
    value: function resolveDependencies(pkg, range) {
      var _this3 = this;

      var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          requested = _ref3.requested;

      var regUrl = this.args.registry || REGISTRY_URL;
      var reqOptions = (0, _PBRequest2.default)(this.args);
      reqOptions.json = true;
      if (this.alreadyHaveValidVersion(pkg, range)) {
        return false;
      }
      return (0, _requestPromise2.default)(regUrl + '/' + pkg.replace('/', '%2f'), reqOptions).then(function (res) {
        if (!res.versions) {
          throw new _PBError2.default('Unable to find "' + pkg + '" version - ignoring.', 'error');
        }
        var versions = (0, _keys2.default)(res.versions);
        if (_this3.args.allVersions && requested || _this3.args.allVersionsRecursive) {
          return _bluebird2.default.mapSeries(versions, function (v) {
            return _this3.getPackageVersion(res.versions[v]);
          });
        }
        var version = range ? Resolver.getMatchingVersion(pkg, versions, range) : res['dist-tags'].latest;

        var packageObject = res.versions[version];
        return _this3.getPackageVersion(packageObject);
      }).catch(_PBError2.default, function (err) {
        return console.log(err.prettyMessage + '\n');
      }).catch(function (err) {
        if (err && err.statusCode === 404) {
          if (requested || !(_this3.args.allVersions || _this3.args.allVersionsRecursive)) {
            throw new _PBError2.default('Unable to find package "' + pkg + '"', 'error');
          }
        } else {
          console.log(err);
        }
      });
    }
  }, {
    key: 'isCached',
    value: function isCached(name, version) {
      if (this.packageCache[name] && this.packageCache[name].includes(version)) {
        return true;
      }
      this.packageCache[name] = (this.packageCache[name] || []).concat(version);
      return false;
    }
  }, {
    key: 'getPackageVersion',
    value: function getPackageVersion(pkg) {
      var _this4 = this;

      var name = pkg.name,
          version = pkg.version,
          dist = pkg.dist,
          dependencies = pkg.dependencies,
          devDependencies = pkg.devDependencies,
          optionalDependencies = pkg.optionalDependencies;


      if (this.isCached(name, version)) {
        return false;
      }
      var key = name + ':' + version;
      this.downloads.set(key, { name: name, version: version, dist: dist });
      Resolver.logPackage(key);

      var combinedDependencies = (0, _assign2.default)({}, dependencies, this.args.devRecursive && devDependencies, this.args.optionalRecursive && optionalDependencies);

      var keys = (0, _keys2.default)(combinedDependencies);
      return _bluebird2.default.map(keys, function (k) {
        var versionPattern = combinedDependencies[k];
        return _this4.resolveDependencies(k, versionPattern);
      }, { concurrency: this.args.concurrency || 100 });
    }
  }, {
    key: 'saveCache',
    value: function saveCache() {
      return writeFile(CACHE_FILE, (0, _stringify2.default)(this.packageCache, null, 4));
    }
  }]);
  return Resolver;
}(_Step3.default);

exports.default = Resolver;