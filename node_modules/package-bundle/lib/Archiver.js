'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _tar = require('tar');

var _tar2 = _interopRequireDefault(_tar);

var _Step2 = require('./Step');

var _Step3 = _interopRequireDefault(_Step2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var OUT_DIR = '.package-bundle';
var OUT_FILE = 'package-bundle-' + Date.now() + '.tgz';

var Archiver = function (_Step) {
  (0, _inherits3.default)(Archiver, _Step);

  function Archiver(args) {
    (0, _classCallCheck3.default)(this, Archiver);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Archiver.__proto__ || (0, _getPrototypeOf2.default)(Archiver)).call(this, args, 3, 'Creating archive'));

    _this.args = args;
    return _this;
  }

  (0, _createClass3.default)(Archiver, [{
    key: 'init',
    value: function init(totalSize) {
      var _this2 = this;

      (0, _get3.default)(Archiver.prototype.__proto__ || (0, _getPrototypeOf2.default)(Archiver.prototype), 'init', this).call(this, totalSize);
      var outFile = this.args.outFile || OUT_FILE;
      _fs2.default.watchFile(outFile, { interval: 100 }, function (cur, pre) {
        var change = cur.size - pre.size;
        _this2.tick(change);
      });
      return _tar2.default.create({
        gzip: true,
        file: outFile,
        cwd: OUT_DIR
      }, ['.']).then(function () {
        return _fs2.default.unwatchFile(outFile);
      }).then(function () {
        return _this2.complete('Created archive at "' + outFile + '"');
      });
    }
  }]);
  return Archiver;
}(_Step3.default);

exports.default = Archiver;