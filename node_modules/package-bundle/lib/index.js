'use strict';

require('colors');

require('babel-polyfill');

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _Resolver = require('./Resolver');

var _Resolver2 = _interopRequireDefault(_Resolver);

var _Downloader = require('./Downloader');

var _Downloader2 = _interopRequireDefault(_Downloader);

var _Archiver = require('./Archiver');

var _Archiver2 = _interopRequireDefault(_Archiver);

var _PBError = require('./PBError');

var _PBError2 = _interopRequireDefault(_PBError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var OUT_DIR = '.package-bundle';

_commander2.default._name = 'package-bundle'; // eslint-disable-line no-underscore-dangle

_commander2.default.version(require('../package').version).usage('[packages...] [options]\n  where <packages> are in the format: ' + '[@scope/]<pkg>[@<version>]\n  If no packages are provided it will check for a package.json').alias('pb').description('Create a bundle of packages including their dependencies in archive format').option('-d, --no-dev', 'ignore dev dependencies in package.json').option('-o, --no-optional', 'ignore optional dependencies in package.json').option('-D, --dev-recursive', 'include all dev dependencies recursively').option('-O, --optional-recursive', 'include all optional dependencies recursively').option('-f, --flat', 'save in a flat file structure, instead of individual folders').option('-z, --no-archive', 'leave dependencies in folder, and don\'t archive').option('-x, --no-cache', 'don\'t use cache file to avoid repeat downloads').option('-F, --out-file <file>', 'output file name').option('-a, --all-versions', 'download all versions of specified packages').option('-A, --all-versions-recursive', 'download all versions of specified packages and dependencies').option('-c, --concurrency <n>', 'number of requests to make at the same time - default=50', parseInt).option('-r, --registry <registry>', 'specify a registry').option('-p, --proxy <url>', 'proxy url').option('--basic-auth <hash>', 'Basic auth hash').option('--auth-token <token>', 'Auth token').option('--insecure', 'ignore TLS (SSL) certificate errors').parse(process.argv);

var resolver = new _Resolver2.default(_commander2.default);
var downloader = new _Downloader2.default(_commander2.default);
var archiver = new _Archiver2.default(_commander2.default);
var startTime = Date.now();

function init() {
  return _bluebird2.default.try(function () {
    if (_fs2.default.existsSync(OUT_DIR)) {
      throw new _PBError2.default('Output dir "' + OUT_DIR + '" already exists.', 'error');
    } else if (_commander2.default.insecure) {
      // Workaround for self-signed certificates.
      process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
    }
  });
}

function finish(time) {
  var seconds = time / 1000;
  console.log('success'.green + ': completed in ' + seconds + 's');
}

init().then(function () {
  return resolver.init();
}).then(function () {
  return downloader.init(resolver.downloads);
}).then(function () {
  return _commander2.default.archive && archiver.init(downloader.totalSize);
}).catch(_PBError2.default, function (err) {
  return console.log(err.prettyMessage);
}).then(function () {
  return _commander2.default.archive && _Downloader2.default.cleanUp();
}).then(function () {
  return finish(Date.now() - startTime);
}).catch(function (err) {
  return console.log(err.stack);
});